options:
	consgoldbar: 4
	outgoldbar: 1
	waitfor: 2
	conscrystal: 16
	outcrystal: 1
	waitforc: 4
variables:
	#
	# VALID ITEMS FOR 
	#
	{v::1} = iron ingot named "<white>Iron bar" with lore "&5Material:iron"
	{v::2} = gold ingot named "<gold>Gold bar" with lore "&5Material:gold"
	{v::3} = diamond named "<blue>Diamond Plate" with lore "&5Material:diamond"
	#
	# MATERIAL CRAFTER
	#
	# -----------------------------MATERIAL NAIL
	{pattern_m::nail} = wooden pressure plate named "&3Pattern" with lore "&5Material:nail"
	{cost_m::nail} = "1||1"
	{item_m::nail::1} = iron ingot
	{item_m::nail::2} = coal
	{val::nail} = tripwire hook named "<white>Iron Nail" with lore "&5SubMaterial:nail"
	# -----------------------------MATERIAL RIVET
	{pattern_m::rivet} = wooden pressure plate named "&3Pattern" with lore "&5Material:rivet"
	{cost_m::rivet} = "1||1"
	{item_m::rivet::1} = iron ingot
	{item_m::rivet::2} = charcoal
	{val::rivet} = tripwire hook named "<white>Iron Rivet" with lore "&5SubMaterial:rivet"

	#
	# TOOL CRAFTER
	#
	# -----------------------------MATERIAL PLATE
	{pattern_t::plate} = wooden pressure plate named "&3Pattern" with lore "&5Material:plate"
	{cost_t::plate::c::1} = "4||2"
	{item_t::plate::v::1} = iron ingot
	{item_t::plate::p::1} = iron ingot named "<white>Iron bar" with lore "&5Material:iron"
	{cost_t::plate::c::2} = "4||2"
	{item_t::plate::v::2} = gold ingot
	{item_t::plate::p::2} = gold ingot named "<gold>Gold bar" with lore "&5Material:gold"
	{cost_t::plate::c::3} = "4||2"
	{item_t::plate::v::3} = diamond
	{item_t::plate::p::3} = diamond named "<blue>Diamond Plate" with lore "&5Material:diamond"
	{item_t::plate::s::1} = coal
	# -----------------------------TOOL SWORD
	{pattern_t::sword} = wooden pressure plate named "&3Pattern" with lore "&5Item:sword"
	{cost_t::sword::c::1} = "2||1||1||1"
	{cost_t::sword::c::2} = "2||1||1||1"
	{cost_t::sword::c::3} = "2||1||1||1"
	{item_t::sword::p::1} = iron sword named "<white>Forge Iron Sword" with lore "test"
	{item_t::sword::p::2} = gold sword named "<gold>Forge Gold Sword" with lore "test"
	#{item_t::sword::p::3} = diamond sword named "<blue>Forge Diamond Sword" with lore "test"
	#{item_t::sword::v::*} = {v::*}
	#{item_t::sword::s::1} = stick
	#{item_t::sword::s::2} = tripwire hook named "<white>Iron Nail" with lore "&5SubMaterial:nail"
	#{item_t::sword::s::3} = tripwire hook named "<white>Iron Rivet" with lore "&5SubMaterial:rivet"
	# -----------------------------TOOL AXE
	{pattern_t::axe} = wooden pressure plate named "&3Pattern" with lore "&5Item:axe"
	{cost_t::axe} = "3||2||1||1"
	# -----------------------------TOOL PICKAXE
	{pattern_t::pickaxe} = wooden pressure plate named "&3Pattern" with lore "&5Item:pickaxe"
	{cost_t::pickaxe} = "3||2||1||1"
	# -----------------------------TOOL SHOVEL
	{pattern_t::shovel} = wooden pressure plate named "&3Pattern" with lore "&5Item:shovel"
	{cost_t::shovel} = "1||2||1||1"
	# -----------------------------TOOL HOE
	{pattern_t::hoe} = wooden pressure plate named "&3Pattern" with lore "&5Item:hoe"
	{cost_t::hoe} = "2||2||1||1"
	# -----------------------------ARMOR HELM
	{pattern_t::helm} = wooden pressure plate named "&3Pattern" with lore "&5Item:helm"
	{cost_t::helm} = "5||0||0||2"
	# -----------------------------ARMOR CHESTPLATE
	{pattern_t::chestplate} = wooden pressure plate named "&3Pattern" with lore "&5Item:chestplate"
	{cost_t::chestplate} = "8||0||0||4"
	# -----------------------------ARMOR LEGGINGS
	{pattern_t::leggings} = wooden pressure plate named "&3Pattern" with lore "&5Item:leggings"
	{cost_t::leggings} = "7||0||0||3"
	# -----------------------------ARMOR BOOTS
	{pattern_t::boots} = wooden pressure plate named "&3Pattern" with lore "&5Item:boots"
	{cost_t::boots} = "4||0||0||2"
command /patterns:
	trigger:
		set {_ch} to chest with 4 rows named "<blue>Pattern List"
		loop {pattern_t::*}:
			add loop-value  to {_ch}
		loop {pattern_m::*}:
			add loop-value  to {_ch}
		open {_ch} to player 
#====================================================MATERIAL CRAFTER
on rightclick on a gravel:
	set {_wood} to targeted block
	set {_h} to hopper 
	set {_hopper} to checkBlock({_wood}, {_h})
	set {_lava} to checkBlock({_wood}, lava)
	set {_water} to checkBlock({_wood}, water)
	wait 10 ticks
	if {_lava} is not set:
		stop
	if {_hopper} is not set:
		stop
	message "Starting material crafter" to player
	wait 10 ticks
	if player's held item is not a bucket:
		message "Hold a bucket to the material Crafter" to player
		stop
	if number of air in {_hopper}'s inventory = 6:
		message "Material Crafter is empty"
		stop
	set {_p} to empty
	loop {pattern_m::*}:
		loop items in {_hopper}'s inventory:
			if lore of loop-value-1 = lore of loop-value-2:
				set {_p} to loop-value-2
				exit 2 loops
	if {_p} = empty:
		message "No pattern detected. Please craft patterns using wooden tools" to player
		stop
	set {_y} to lore of {_p}
	set {_yy::*} to {_y} split by ":"
	set {_x} to {cost_m::%{_yy::2}%}
	set {_xx::*} to {_x} split by "||"
	loop {item_m::%{_yy::2}%::*}:
		set {_bool} to false
		loop items in {_hopper}'s inventory:
			if loop-value-1 = loop-value-2:
				set {_bool} to true
				exit 1 loop
		if {_bool} = false:
			message "Ingridient %loop-value-1% is missing" to player
			stop
	set {_loopval} to 1
	loop {item_m::%{_yy::2}%::*}:
		loop items in {_hopper}'s inventory:
			if loop-value-1 = loop-value-2:
				if item size of loop-value-2 >= {_xx::%{_loopval}%} parsed as a number:
					exit 1 loop
				else:
					message "Not enough %loop-value-1%" to player
					message "Needs: %{_xx::%loop-index-1%}% In Hopper: %item size of loop-value-2%"
					stop
		add 1 to {_loopval}
	set {_loopval} to 1
	loop {item_m::%{_yy::2}%::*}:
		loop items in {_hopper}'s inventory:
			if loop-value-1 = loop-value-2:
				set {_cnt} to {_xx::%{_loopval}%} parsed as a number
				set {_cntx} to item size of loop-value-2
				if {_cntx} - {_cnt} = 0:
					set loop-value-2 to air
					exit 1 loop
				else:
					set {_holder} to loop-value-2
					set item size of {_holder} to {_cntx} - {_cnt}
					set loop-value-2 to {_holder}
					exit 1 loop
		add 1 to {_loopval}
	play sound "block.fire.extinguish" with volume 1 and pitch 1 at {_wood}'s location for all players
	play 5 lava pop on {_wood}
	wait 10 ticks
	play sound "block.anvil.place" with volume 0.8 and pitch 1 at {_wood}'s location for all players
	play 5 lava pop on {_wood}
	if random number from 0 to 10 = 1:
		if {_water} is set:
			set the block at {_water}'s location to stone
		else:
			set player on fire for 5 seconds
			message "No water reserve" to player
		
	if {_hopper} has enough space for {val::%{_yy::2}%}:
		add {val::%{_yy::2}%} to {_hopper}'s inventory
		stop
	drop {val::%{_yy::2}%} at block above {_hopper}
#====================================================TOOL CRAFTER
on rightclick on a obsidian:
	set {_obsi} to targeted block
	set {_h} to hopper 
	set {_ch} to iron block
	set {_hopper} to checkBlock({_obsi}, {_h})
	set {_chest} to checkBlock({_obsi}, chest)
	message "Starting tool crafter" to player
	if player's held item is not a bucket:
		message "Hold a bucket to the material Crafter" to player
		stop
	if {_chest} is not set:
		broadcast "chestnot set"
		stop
	if {_hopper} is not set:
		stop
	if number of air in {_hopper}'s inventory = 6:
		message "Material Crafter is empty"
		stop
	loop {pattern_t::*}:
		loop items in {_hopper}'s inventory:
			if lore of loop-value-1 = lore of loop-value-2:
				set {_p} to loop-value-2
				exit 2 loops
	if {_p} = empty:
		message "No pattern detected. Please craft patterns using wooden tools" to player
		stop
	set {_y} to lore of {_p}
	set {_yy::*} to {_y} split by ":"
	set {_out} to air
	set {_cost} to air
	set {_main} to air
	loop {item_t::%{_yy::2}%::v::*}:
		loop items in {_hopper}'s inventory:
			if loop-value-1 = loop-value-2:
				set {_out} to {item_t::%{_yy::2}%::p::%loop-index-1%}
				set {_cost::*} to {cost_t::%{_yy::2}%::c::%loop-index-1%} split by "||"
				set {_main} to loop-value-1
	#--CHECK IF MAIN ITEM EXIST-----------------------------------------
	set {_bool} to false
	loop items in {_hopper}'s inventory:
		if loop-value = {_main}:
			set {_bool} to true
			exit 1 loop
	if {_bool} = false:
		message "No valid main material for this pattern" to player
		stop
	#--CHECK IF SUB ITEM EXIST-------------------------------------------
	loop {item_t::%{_yy::2}%::s::*}:
		set {_bool} to false
		loop items in {_hopper}'s inventory:
			if loop-value-1 = loop-value-2:
				set {_bool} to true
				exit 1 loop
		if {_bool} = false:
			message "Ingridient %loop-value% is missing" to player
			stop
	#--CHECK IF MAIN ITEM HAVE ENOUGH COUNT-------------------------------
	loop items in {_hopper}'s inventory:
		if loop-value = {_main}:
			if item size of loop-value >= {_cost::1} parsed as a number:
				exit 1 loop
			else:
				message "Not enough %{_main}%" to player
				message "Needs: %{_cost::1}% In Hopper: %item size of loop-value%"
				stop
	#--CHECK IF SUB ITEM HAVE ENOUGH COUNT--------------------------------
	set {_loopval} to 2
	loop {item_t::%{_yy::2}%::s::*}:
		loop items in {_hopper}'s inventory:
			if loop-value-1 = loop-value-2:
				if item size of loop-value-2 >= {_cost::%{_loopval}%} parsed as a number:
					exit 1 loop
				else:
					message "Not enough %loop-value-1%" to player
					message "Needs: %{_cost::%{_loopval}%}% In Hopper: %item size of loop-value-2%"
					stop		
		add 1 to {_loopval}
	#--REDUCE MAIN ITEM--------------------------------
	loop items in {_hopper}'s inventory:
		if loop-value = {_main}:
			set {_cnt} to {_cost::1} parsed as a number
			set {_cntx} to item size of loop-value
			if {_cntx} - {_cnt} = 0:
				set loop-value to air
				exit 1 loop
			else:
				set {_holder} to loop-value
				set item size of {_holder} to {_cntx} - {_cnt}
				set loop-value to {_holder}
				exit 1 loop
	#--REDUCE SUB ITEM--------------------------------
	set {_loopval} to 2
	loop {item_t::%{_yy::2}%::s::*}:
		loop items in {_hopper}'s inventory:
			if loop-value-1 = loop-value-2:
				set {_cnt} to {_cost::%{_loopval}%} parsed as a number
				set {_cntx} to item size of loop-value-2
				if {_cntx} - {_cnt} = 0:
					set loop-value-2 to air
					exit 1 loop
				else:
					set {_holder} to loop-value-2
					set item size of {_holder} to {_cntx} - {_cnt}
					set loop-value-2 to {_holder}
					exit 1 loop		
		add 1 to {_loopval}

	drop {_out} at block above {_obsi}

on craft wooden tools:
	set {_n} to "%item%" parsed as a text
	set {_w::*} to {_n} split by "_"
	set item to wooden pressure plate named "&3Pattern" with lore "&5Item:%{_w::2}%"
on craft diamond tools:
	cancel event
	message "Please craft patterns using wooden tool and use a tool crafter" to player
on craft iron tools:
	cancel event
	message "Please craft patterns using wooden tool and use a tool crafter" to player
on craft gold tools:
	cancel event
	message "Please craft patterns using wooden tool and use a tool crafter" to player


on rightclick holding blue glass block:
	if player's held item is blue glass block named "<blue>Mana Stone":
		cancel event
		if {useMana.%player%} is not set:
			set {useMana.%player%} to false
		if {useMana.%player%} is false:
			if item amount of players's tool is 1:
				set player's held item to air
			else:
				remove 1 from item amount of player's tool
			set {useMana.%player%} to true
			send "Charging your mana" to player
			wait 400 ticks
			add 1 to {cMana.%player%}
			send "<blue>Mana:  <white>%{cMana.%player%}%" to player
			set {useMana.%player%} to false
		else:
			send "Charging your mana please wait" to player
function crystal(r: number, p: player, b: block):
	if {_p} has enough space for blue glass block named "<blue>Mana Stone":
		if item amount of {_p}'s tool is {_r}:
			set {_p}'s held item to air
		else:
			remove {_r} from item amount of {_p}'s tool
		send "Crafting <blue>Mana Stone" to {_p}
		loop {@waitforc} times:
			wait for 1 second
			play sound "entity.experience_orb.pickup" with volume 1 and pitch 2 at {_b}'s location for all players
			play 2 magical critical hit on {_b}
		play mob spawner flames on {_b}
		add 1 blue glass block named "<blue>Mana Stone" to the inventory of {_p} 
		send "Successfuly crafted a <blue>Mana Stone" to {_p}

#
# CRAFT UTILITY
#
function checkBlock(m: block, s: item) :: block:
	if the block north of {_m} is {_s}:
		return block north of {_m}
	if the block south of {_m} is {_s}:
		return block south of {_m}
	if the block east of {_m} is {_s}:
		return block east of {_m}
	if the block west of {_m} is {_s}:
		return block west of {_m}
	else:
		return block at location(-1,-1,-1)

	